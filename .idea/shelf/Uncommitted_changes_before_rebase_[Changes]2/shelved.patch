Index: templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>WEBCAM</title>\n    <style>\n#my_camera{\n width: 800px;\n height: 600px;\n border: 1px solid black;\n}\n</style>\n  </head>\n  <body>\n    <div id=\"my_camera\"></div>\n<input type=button value=\"Start\" onClick=\"take_snapshot()\">\n\n<div id=\"results\" ></div>\n\n<!-- Script -->\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/webcamjs/1.0.25/webcam.min.js\"></script>\n\n<!-- Code to handle taking the snapshot and displaying it locally -->\n<script language=\"JavaScript\">\n\n // Configure a few settings and attach camera\n Webcam.set({\n  width: 800,\n  height: 600,\n  image_format: 'jpeg',\n  jpeg_quality: 100\n });\n Webcam.attach( '#my_camera' );\nconsole.log(Webcam);\nfunction take_snapshot() {\n // take snapshot and get image data\n Webcam.snap( function(data_uri) {\n // display results in page\n document.getElementById('results').innerHTML =\n  '<img src=\"'+data_uri+'\"/>';\n  imgArr.push(data_uri);\n } );\n\n}\n\nlet count = 0;\nlet imgArr = [];\n  var myvar = setInterval(function(){\n    if(Webcam.loaded){\n      if(count==2){\n        clearInterval(myvar);\n        console.log(imgArr);\n        let x = sendData();\n        console.log(x);\n      }\n      take_snapshot()\n      count++;\n    }\n  },500);\nasync function sendData(){\n  json = null;\n  await fetch('http://localhost:8000/', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(imgArr)\n  })\n  .then((response) => response.json())\n  .then((responseJSON) => {\n     json = responseJSON;\n\n     return json;\n  }).catch(err =>{\n      json = err;\n      return json;\n  });\n  Webcam.reset()\n}\n</script>\n  </body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/index.html b/templates/index.html
--- a/templates/index.html	(revision febd0ce9c3241e896ce8c91cec87032d7a47ee5a)
+++ b/templates/index.html	(date 1655233840805)
@@ -14,6 +14,7 @@
   <body>
     <div id="my_camera"></div>
 <input type=button value="Start" onClick="take_snapshot()">
+<input type=button value="Save" onClick="sendData()">
 
 <div id="results" ></div>
 
@@ -43,23 +44,11 @@
 
 }
 
-let count = 0;
 let imgArr = [];
-  var myvar = setInterval(function(){
-    if(Webcam.loaded){
-      if(count==2){
-        clearInterval(myvar);
-        console.log(imgArr);
-        let x = sendData();
-        console.log(x);
-      }
-      take_snapshot()
-      count++;
-    }
-  },500);
+
 async function sendData(){
   json = null;
-  await fetch('http://localhost:8000/', {
+  await fetch('http://127.0.0.1:8000', {
     method: 'POST',
     headers: {
       'Accept': 'application/json',
Index: api/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\nfrom .models import *\nadmin.site.register(Category)\nadmin.site.register(Images)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/admin.py b/api/admin.py
--- a/api/admin.py	(revision febd0ce9c3241e896ce8c91cec87032d7a47ee5a)
+++ b/api/admin.py	(date 1655233840865)
@@ -1,4 +1,3 @@
 from django.contrib import admin
 from .models import *
-admin.site.register(Category)
 admin.site.register(Images)
Index: api/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\n\nclass Category(models.Model):\n    category = models.CharField(max_length=25)\n\n    def __str__(self):\n        return self.category\n\nclass Images(models.Model):\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    file = models.ImageField()\n\n    def __str__(self):\n        return self.category.category\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/models.py b/api/models.py
--- a/api/models.py	(revision febd0ce9c3241e896ce8c91cec87032d7a47ee5a)
+++ b/api/models.py	(date 1655233840909)
@@ -1,14 +1,7 @@
 from django.db import models
 
-class Category(models.Model):
-    category = models.CharField(max_length=25)
-
-    def __str__(self):
-        return self.category
-
 class Images(models.Model):
-    category = models.ForeignKey(Category, on_delete=models.CASCADE)
-    file = models.ImageField()
+    ImageData = models.TextField(blank=True)
 
     def __str__(self):
-        return self.category.category
+        return self.ImageData[:15] + "..."
Index: api/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_exempt\nimport json\nimport base64\nimport random\nimport string\nfrom .models import *\nfrom django.http import JsonResponse\n@csrf_exempt\ndef index(request):\n    if request.method == \"POST\":\n        data = request.body\n        data = json.loads(data[0:len(data)])\n        c = Category.objects.get(pk=1)\n        temp = len('data:image/jpeg;base64,')\n        for d in data:\n            d = d[temp:len(d)]\n            imgdata = base64.b64decode(d)\n            filename = randomString()+'.jpg'  # I assume you have a way of picking unique filenames\n            with open('media/'+filename, 'wb') as f:\n                f.write(imgdata)\n            i = Images.objects.create(category=c, file=filename)\n            i.save()\n        return JsonResponse({'data': 'Success'})\n    return render(request, 'index.html')\n\ndef randomString(stringLength=5):\n    \"\"\"Generate a random string of fixed length \"\"\"\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/views.py b/api/views.py
--- a/api/views.py	(revision febd0ce9c3241e896ce8c91cec87032d7a47ee5a)
+++ b/api/views.py	(date 1655233840945)
@@ -1,9 +1,6 @@
 from django.shortcuts import render
 from django.views.decorators.csrf import csrf_exempt
 import json
-import base64
-import random
-import string
 from .models import *
 from django.http import JsonResponse
 @csrf_exempt
@@ -11,20 +8,10 @@
     if request.method == "POST":
         data = request.body
         data = json.loads(data[0:len(data)])
-        c = Category.objects.get(pk=1)
         temp = len('data:image/jpeg;base64,')
         for d in data:
             d = d[temp:len(d)]
-            imgdata = base64.b64decode(d)
-            filename = randomString()+'.jpg'  # I assume you have a way of picking unique filenames
-            with open('media/'+filename, 'wb') as f:
-                f.write(imgdata)
-            i = Images.objects.create(category=c, file=filename)
+            i = Images.objects.create(ImageData=d)
             i.save()
         return JsonResponse({'data': 'Success'})
     return render(request, 'index.html')
-
-def randomString(stringLength=5):
-    """Generate a random string of fixed length """
-    letters = string.ascii_lowercase
-    return ''.join(random.choice(letters) for i in range(stringLength))
